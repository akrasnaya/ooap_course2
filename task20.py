"""
4. Наследование вариаций

- наследование с функциональной вариацией
# РОДИТЕЛЬСКИЙ КЛАСС - МОТОЦИКЛ
class Bike():
    def __init__(self, num, brand, power):
        self.num = num #СЕРИЙНЫЙ НОМЕР
        self.brand = brand # МАРКА
        self.power = power # МОЩНОСТЬ

    def ride(self):
        print('just ride a bike')

# КЛАСС-НАСЛЕДНИК - ГОНОЧНЫЙ МОТОЦИКЛ (ЧАСТНЫЙ СЛУЧАЙ)
class SportBike(Bike):
    def __init__(self, num, brand, power, type):
        super(SportBike, self).__init__(num, brand, power)
        self.type = type # ТИП ГОНОК, В КОТОРЫХ МОЖЕТ ИСПОЛЬЗОВАТЬСЯ МОТОЦИКЛ

    def ride(self):
        print(f'riding the bike only on {self.type} races')
ФУНКЦИЯ ride ПЕРЕОПРЕДЕЛЕНА

- наследование с вариацией типов
класс родитель Machine() имеет поле type, которое обозначает тип машины. Класс-наследник Automobile() тоже имеет поле type, но здесь оно уже обозначает тип кузова

5. Наследие с конкретизацией
класс родитель Machine() подразумеват под собой вообще любую машину, начиная от стиральной машины и заканчивая станком ЧПУ на заводе.
Класс-наследник Automobile() обозначает автомобиль.

6. Структурное наследование
Класс-родитель компьютер, наследник - игровой компьютер, который можно пересобирать (менять запчасти)
"""
